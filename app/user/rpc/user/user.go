// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"giligili/app/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty               = pb.Empty
	FollowUserReq       = pb.FollowUserReq
	GetFolloweeListReq  = pb.GetFolloweeListReq
	GetFolloweeListResp = pb.GetFolloweeListResp
	GetFollowerListReq  = pb.GetFollowerListReq
	GetFollowerListResp = pb.GetFollowerListResp
	GetUserInfoReq      = pb.GetUserInfoReq
	GetUserInfoResp     = pb.GetUserInfoResp
	IsExistReq          = pb.IsExistReq
	IsExistResp         = pb.IsExistResp
	LoginReq            = pb.LoginReq
	LoginResp           = pb.LoginResp
	RegisterReq         = pb.RegisterReq
	RegisterResp        = pb.RegisterResp
	UnfollowUserReq     = pb.UnfollowUserReq

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*Empty, error)
		UnfollowUser(ctx context.Context, in *UnfollowUserReq, opts ...grpc.CallOption) (*Empty, error)
		GetFollowerList(ctx context.Context, in *GetFollowerListReq, opts ...grpc.CallOption) (*GetFollowerListResp, error)
		GetFolloweeList(ctx context.Context, in *GetFolloweeListReq, opts ...grpc.CallOption) (*GetFolloweeListResp, error)
		IsExist(ctx context.Context, in *IsExistReq, opts ...grpc.CallOption) (*IsExistResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.FollowUser(ctx, in, opts...)
}

func (m *defaultUser) UnfollowUser(ctx context.Context, in *UnfollowUserReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UnfollowUser(ctx, in, opts...)
}

func (m *defaultUser) GetFollowerList(ctx context.Context, in *GetFollowerListReq, opts ...grpc.CallOption) (*GetFollowerListResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultUser) GetFolloweeList(ctx context.Context, in *GetFolloweeListReq, opts ...grpc.CallOption) (*GetFolloweeListResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetFolloweeList(ctx, in, opts...)
}

func (m *defaultUser) IsExist(ctx context.Context, in *IsExistReq, opts ...grpc.CallOption) (*IsExistResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.IsExist(ctx, in, opts...)
}
