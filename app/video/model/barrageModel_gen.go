// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	barrageFieldNames          = builder.RawFieldNames(&Barrage{})
	barrageRows                = strings.Join(barrageFieldNames, ",")
	barrageRowsExpectAutoSet   = strings.Join(stringx.Remove(barrageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	barrageRowsWithPlaceHolder = strings.Join(stringx.Remove(barrageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGiligiliBarrageIdPrefix = "cache:giligili:barrage:id:"
)

type (
	barrageModel interface {
		Insert(ctx context.Context, data *Barrage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Barrage, error)
		Update(ctx context.Context, data *Barrage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBarrageModel struct {
		sqlc.CachedConn
		table string
	}

	Barrage struct {
		Id           int64        `db:"id"`            // 弹幕ID
		CreateTime   time.Time    `db:"create_time"`   // 创建时间
		DeleteTime   sql.NullTime `db:"delete_time"`   // 删除时间
		UserId       int64        `db:"user_id"`       // 用户ID
		UserNickname string       `db:"user_nickname"` // 用户昵称
		VideoId      int64        `db:"video_id"`      // 视频ID
		Text         string       `db:"text"`          // 弹幕内容
		Color        int64        `db:"color"`         // 弹幕颜色
		Type         int64        `db:"type"`          // 弹幕类型，0表示滚动弹幕，1表示顶部弹幕，2表示底部弹幕
		Timestamp    int64        `db:"timestamp"`     // 弹幕出现时间（秒）
	}
)

func newBarrageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBarrageModel {
	return &defaultBarrageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`barrage`",
	}
}

func (m *defaultBarrageModel) Delete(ctx context.Context, id int64) error {
	giligiliBarrageIdKey := fmt.Sprintf("%s%v", cacheGiligiliBarrageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, giligiliBarrageIdKey)
	return err
}

func (m *defaultBarrageModel) FindOne(ctx context.Context, id int64) (*Barrage, error) {
	giligiliBarrageIdKey := fmt.Sprintf("%s%v", cacheGiligiliBarrageIdPrefix, id)
	var resp Barrage
	err := m.QueryRowCtx(ctx, &resp, giligiliBarrageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", barrageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBarrageModel) Insert(ctx context.Context, data *Barrage) (sql.Result, error) {
	giligiliBarrageIdKey := fmt.Sprintf("%s%v", cacheGiligiliBarrageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, barrageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.UserId, data.UserNickname, data.VideoId, data.Text, data.Color, data.Type, data.Timestamp)
	}, giligiliBarrageIdKey)
	return ret, err
}

func (m *defaultBarrageModel) Update(ctx context.Context, data *Barrage) error {
	giligiliBarrageIdKey := fmt.Sprintf("%s%v", cacheGiligiliBarrageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, barrageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.UserId, data.UserNickname, data.VideoId, data.Text, data.Color, data.Type, data.Timestamp, data.Id)
	}, giligiliBarrageIdKey)
	return err
}

func (m *defaultBarrageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGiligiliBarrageIdPrefix, primary)
}

func (m *defaultBarrageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", barrageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBarrageModel) tableName() string {
	return m.table
}
